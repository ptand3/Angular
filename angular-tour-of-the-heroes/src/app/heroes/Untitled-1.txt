LISTING OF THE COMPONENTS

===============================
AppComponent :
 app.component.ts
 app.component.html
 app.component.scss
 ================================================================
 New HeroesComponent to display Hero information
 [ng generate component Heroes]

You always import the Component symbol from the Angular core library and annotate the component class with @Component.
@Component is a decorator function that specifies the Angular metadata for the component.

The CLI generated three metadata properties:

selector— the component's CSS element selector
templateUrl— the location of the component's template file.
styleUrls— the location of the component's private CSS styles.

The CSS element selector, 'app-heroes', matches the name of the HTML element that identifies this component within a parent component's template.

The ngOnInit is a lifecycle hook. Angular calls ngOnInit shortly after creating a component. It's a good place to put initialization logic.

Always export the component class so you can import it elsewhere ... like in the AppModule.
=================================================================================================
[(ngModel)] is Angular's two-way data binding syntax.
Here it binds the hero.name property to the HTML textbox so that data can flow in both directions: from the hero.name property to the textbox, and from the textbox back to the hero.name.

The *ngFor is Angular's repeater directive. It repeats the host element for each element in a list.
In this example

<li> is the host element
heroes is the list from the HeroesComponent class.
hero holds the current hero object for each iteration through the list.

============================================================================
Event Binding
<li *ngFor="let hero of heroes" (click)="onSelect(hero)">
This is an example of Angular's event binding syntax.

The parentheses around click tell Angular to listen for the <li> element's click event. When the user clicks in the <li>, Angular executes the onSelect(hero) expression.

onSelect() is a HeroesComponent method that you're about to write. Angular calls it with the hero object displayed in the clicked <li>, the same hero defined previously in the *ngFor expression.